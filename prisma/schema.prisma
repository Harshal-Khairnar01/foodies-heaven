// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  recipes  Recipe[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  thumbnail   String?
  userId      String       @db.ObjectId
  category    String
  region      String
  type        String
  ingredients Ingredient[]
  recipe      RecipeStep[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  prepTime    String?
  cookTime    String?
  rating      Float?
  difficulty  String?
  tags        String[]
  notes       String?

  user        User         @relation(fields: [userId], references: [id])
}

type Ingredient {
  name     String
  quantity String
}

type RecipeStep {
  step String
}